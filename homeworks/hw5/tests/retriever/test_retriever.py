import pytest
import os
import sys

# Add the project root to the path for importing from src
project_root = os.path.abspath(os.path.join(os.path.dirname(__file__), "../.."))
if project_root not in sys.path:
    sys.path.insert(0, project_root)

import pandas as pd
import numpy as np
from unittest.mock import patch, MagicMock
from src.retriever.retriever import get_similar_responses, load_data

# Create a fixture for test data
@pytest.fixture
def sample_data():
    """Create a sample DataFrame for testing."""
    data = {
        'prompt': [
            'What is needed for a fax demodulator to intercept fax messages?',
            'What is the process of dissimilar friction stir welding (DFSW) based on?',
            'How can lacceroic acid be obtained as a crystalline solid?',
            'What is High Blast Explosive (HBX) primarily used for?',
            'What is the function of the KCNG1 gene in humans?'
        ],
        'wikipedia_excerpt': [
            'Fax demodulator: A fax demodulator is a device used to intercept fax messages by listening in on a telephone line or radio signal.',
            'Dissimilar friction stir welding: DFSW is based on a frictional heat generated by a simple tool in order to soften the materials.',
            'Lacceroic acid: Ethyl lacceroate can be obtained as a crystalline solid by the action of HCl gas on lacceroic acid in boiling absolute alcohol.',
            'High Blast Explosive: HBX is an explosive used as a bursting charge in missile warheads, mines, depth bombs, and torpedoes.',
            'KCNG1: Potassium voltage-gated channel subfamily G member 1 is a protein that in humans is encoded by the KCNG1 gene.'
        ]
    }
    return pd.DataFrame(data)

# Create a fixture to mock the embedding generation
@pytest.fixture
def mock_embeddings():
    """Create mock embeddings for testing."""
    # 5 samples with 10-dimensional embeddings
    return np.random.random((5, 10))

# Test the basic functionality of get_similar_responses
def test_get_similar_responses_basic(sample_data, mock_embeddings):
    """Test that get_similar_responses returns the expected number of results."""
    # Mock necessary components
    with patch('src.retriever.retriever.df', sample_data), \
         patch('src.retriever.retriever.embeddings', mock_embeddings), \
         patch('src.retriever.retriever.model.encode', return_value=np.random.random(10)):
        
        # Call the function
        results = get_similar_responses("What is a fax demodulator?", top_k=3)
        
        # Check if results match expectations
        assert isinstance(results, list)
        assert len(results) == 3
        assert all(isinstance(r, str) for r in results)

